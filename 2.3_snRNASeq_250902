---
title: "2.3 snRNASeq"
author: "Matthew Luchs"
date: "2025-09-02"
output: html_document
---
***============ scRNASeq Analysis =============***

**Step 1: Install Packages**

```{r}
#Install packages
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
if (!require("tidyverse", quietly = TRUE))
  install.packages("tidyverse")
if (!require("colorspace", quietly = TRUE))
  install.packages("colorspace")

BiocManager::install("SoupX")

# Install annotation packages for RefSeq mapping
tryCatch({
  BiocManager::install("biomaRt")
  message("biomaRt installed successfully")
}, error = function(e) {
  message("Failed to install biomaRt: ", e$message)
})

tryCatch({
  BiocManager::install("org.Hs.eg.db")
  message("org.Hs.eg.db installed successfully")
}, error = function(e) {
  message("Failed to install org.Hs.eg.db: ", e$message)
})
```

**Step 1B: Load Libraries**

```{r}
# Load required libraries
library(Seurat)
library(tidyverse)
library(RColorBrewer)
library(colorspace)
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(scran)
library(SingleCellExperiment)
library(openxlsx)
library(readxl)
library(purrr)
```

**Step 1C: Load Data and Filter**

```{r}
# 1. Load 10X data and perform SoupX background correction
c1_auto_out <- Read10X("/data/pepino/snRNA/C1/outs/filtered_feature_bc_matrix/")
c2_auto_out <- Read10X("/data/pepino/snRNA/C2/outs/filtered_feature_bc_matrix/")

r1_auto_out <- Read10X("/data/pepino/snRNA/R1/outs/filtered_feature_bc_matrix/")
r2_auto_out <- Read10X("/data/pepino/snRNA/R2/outs/filtered_feature_bc_matrix/")

# 2. Create Seurat objects
c1_seurat.obj <- CreateSeuratObject(c1_auto_out, project = 'C1')
c2_seurat.obj <- CreateSeuratObject(c2_auto_out, project = 'C2')
r1_seurat.obj <- CreateSeuratObject(r1_auto_out, project = 'R1')
r2_seurat.obj <- CreateSeuratObject(r2_auto_out, project = 'R2')

# 3. Merge all datasets
all.combined <- merge(c1_seurat.obj, y = c(c2_seurat.obj, r1_seurat.obj, r2_seurat.obj),
          add.cell.ids = c("C1", "C2", "R1", "R2"), project = "ALL")

# 4. Add sample metadata
all.combined$log10GenesPerUMI <- log10(all.combined$nFeature_RNA) / log10(all.combined$nCount_RNA)

all.combined_metadata <- all.combined@meta.data
all.combined_metadata$cells <- rownames(all.combined_metadata)
all.combined_metadata$sample <- NA
all.combined_metadata$sample[grep("^C1_", rownames(all.combined_metadata))] <- "C1"
all.combined_metadata$sample[grep("^C2_", rownames(all.combined_metadata))] <- "C2"
all.combined_metadata$sample[grep("^R1_", rownames(all.combined_metadata))] <- "R1"
all.combined_metadata$sample[grep("^R2_", rownames(all.combined_metadata))] <- "R2"

all.combined@meta.data <- all.combined_metadata

# 5. Filter, normalize, and find variable features
all.combined <- subset(all.combined, subset = nFeature_RNA > 50 & nFeature_RNA < 7500 & nCount_RNA < 40000)
#all.combined <- NormalizeData(all.combined)
all.combined <- FindVariableFeatures(all.combined, selection.method = "vst", nfeatures = 2000)
```

**Step 1D Normalization**

```{r}
# 5. Filter cells and genes
all.combined <- subset(all.combined, subset = nFeature_RNA > 50 & nFeature_RNA < 7500 & nCount_RNA < 40000)

# 6. DECONVOLUTION NORMALIZATION (Lun et al. 2016 method)
message("Performing deconvolution normalization...")

# For Seurat v5 compatibility - join layers first
if ("RNA" %in% names(all.combined@assays)) {
  all.combined <- JoinLayers(all.combined)
}

# Convert Seurat object to SingleCellExperiment for scran
sce <- as.SingleCellExperiment(all.combined)

# Remove low-abundance genes (systematic zeros)
# Keep genes with average count > 0.1 across all cells
ave.counts <- Matrix::rowMeans(counts(sce))
scrap.genes <- ave.counts <= 0.1
#count(scrap.genes)
keep.genes <- ave.counts >= 0.1
#count(keep.genes)
sce.filtered <- sce[keep.genes, ]

message(paste("Filtered from", nrow(sce), "to", nrow(sce.filtered), "genes"))

# Pre-cluster cells for deconvolution
# Use quick clustering based on Spearman correlation
set.seed(42)
clusters <- quickCluster(sce.filtered, min.size = 100)
message(paste("Created", length(unique(clusters)), "clusters for deconvolution"))

# Compute deconvolution size factors
# This is the key step from Lun et al. 2016
sce.filtered <- computeSumFactors(sce.filtered, clusters = clusters, min.mean = 0.1)
size.factors <- sizeFactors(sce.filtered)


# Check for any negative size factors (should be very rare)
summary(size.factors)
if(any(size.factors <= 0)) {
  message("Warning: Found negative size factors. Removing problematic cells...")
  keep.cells <- size.factors > 0
  sce.filtered <- sce.filtered[, keep.cells]
  size.factors <- size.factors[keep.cells]
}

# Apply size factors to normalize
# Manual log-normalization with size factors
normalized.counts <- log1p(t(t(counts(sce.filtered)) / size.factors) * median(size.factors))
logcounts(sce.filtered) <- normalized.counts
sce.norm <- sce.filtered

# Convert back to Seurat object
# Extract normalized counts
norm.counts <- logcounts(sce.norm)

# Create new Seurat object with normalized data
seurat.deconv <- CreateSeuratObject(counts = counts(sce.norm), 
                                   project = "ALL_deconv",
                                   meta.data = all.combined@meta.data[colnames(sce.norm), ])

# Add the deconvolution-normalized data (Seurat v5 compatible)
seurat.deconv[["RNA"]]$data <- norm.counts

# Store size factors in metadata
seurat.deconv$deconv_size_factors <- size.factors

# 7. Find variable features using deconvolution-normalized data
seurat.deconv <- FindVariableFeatures(seurat.deconv, selection.method = "vst", nfeatures = 2000)

```

**Step 2: PCA/UMAP**

```{r}
# 8. Scale data for PCA
seurat.deconv <- ScaleData(seurat.deconv)
# 9. Run PCA
seurat.deconv <- RunPCA(seurat.deconv)
# Plot elbow plot to determine number of PCs
ElbowPlot(seurat.deconv)
# 10. Find neighbors and clusters
seurat.deconv <- FindNeighbors(seurat.deconv, dims = 1:20)
seurat.deconv <- FindClusters(seurat.deconv, resolution = 1.6)
# 11. Run UMAP
seurat.deconv <- RunUMAP(seurat.deconv, dims = 1:20)
```

**2A Marker Gene Identification and Annotation**

```{r}
# ---- Find Marker Genes ----
cluster_markers <- FindAllMarkers(
  object = seurat.deconv,
  only.pos = TRUE,
  min.pct = .25,
  logfc.threshold = .25)

top200_per_cluster <- cluster_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 200)

# Create a new workbook with tabs for each cluster
wb <- createWorkbook()
clusters <- unique(top200_per_cluster$cluster)
for(cluster in clusters) {
  cluster_data <- top200_per_cluster %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/top200_genes_per_cluster.xlsx", overwrite = TRUE)

# ---- Load Annotations and Merge ----
# Load Seurat top 200 markers per cluster 

# Get all sheet names
sheet_names <- excel_sheets("/home/matthew/data/top200_genes_per_cluster.xlsx")

# Read all sheets and combine them into one dataframe
cluster_genes <- map_dfr(sheet_names,                    ~read_excel("/home/matthew/data/top200_genes_per_cluster.xlsx", 
                                   sheet = .x))

# Load the DIAMOND results
annot <- read_tsv("/home/matthew/data/cluster_annotations.tsv", col_names = c(
  "transcript_id", "sseqid", "pident", "evalue", "bitscore", "description"
))

# Clean DIAMOND output
annot_clean <- annot %>%
  mutate(
    gene_id = str_extract(transcript_id, "g\\d+"),
    gene_symbol = str_extract(sseqid, "(?<=\\|)[A-Z0-9]+(?=_HUMAN)"),
    protein_name = str_remove(description, "sp\\|.*?\\|.*?_HUMAN\\s*")
  )

# Keep best hit per gene
annot_best <- annot_clean %>%
  group_by(gene_id) %>%
  slice_max(bitscore, n = 1) %>%
  ungroup()

# FIXED: Check column names and adjust join accordingly
# Debug: Check what columns exist
print("Columns in cluster_genes:")
print(colnames(cluster_genes))
print("Columns in annot_best:")
print(colnames(annot_best))

# Merge with cluster info - FIXED: Use correct column name
final <- cluster_genes %>%
  left_join(annot_best, by = c("gene" = "gene_id"), relationship = "many-to-many")

# Create workbook from the annotated data
wb <- createWorkbook()
clusters <- unique(final$cluster)
for(cluster in clusters) {
  cluster_data <- final %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/top200_genes_annotated.xlsx", overwrite = TRUE)
```

**Step 3: Visualization**

```{r}
# 8a. UMAP for all clusters from all samples in the same plot
DimPlot(seurat.deconv, reduction = "umap", group.by = "seurat_clusters", label = TRUE, label.size = 4) +
  ggtitle("UMAP: All Clusters from All Samples") +
  theme(plot.title = element_text(hjust = 0.5))

# 8b. Create subsets for C1/C2 and R1/R2
c1_c2_subset <- subset(seurat.deconv, subset = sample %in% c("C1", "C2"))
r1_r2_subset <- subset(seurat.deconv, subset = sample %in% c("R1", "R2"))

# Determine which sample has fewer cells in each subset
c1_cells <- sum(c1_c2_subset$sample == "C1")
c2_cells <- sum(c1_c2_subset$sample == "C2")
r1_cells <- sum(r1_r2_subset$sample == "R1")
r2_cells <- sum(r1_r2_subset$sample == "R2")

print(paste("C1 cells:", c1_cells, "C2 cells:", c2_cells))
print(paste("R1 cells:", r1_cells, "R2 cells:", r2_cells))

# Create the smaller sample objects
c1_c2_smaller <- ifelse(c1_cells < c2_cells, "C1", "C2")
r1_r2_smaller <- ifelse(r1_cells < r2_cells, "R1", "R2")


#UMAP Plots by Group (C or R)

# Your original plots with labels added
p1 <- DimPlot(c1_c2_subset, reduction = "umap", group.by = "sample",
              order = c1_c2_smaller) +  # This puts the smaller sample on top
  ggtitle("UMAP: C1/C2 Samples") +
  theme(plot.title = element_text(hjust = 0.5))

# Add cluster labels
embeddings <- Embeddings(c1_c2_subset, reduction = "umap")
clusters <- c1_c2_subset$seurat_clusters
centroids <- do.call(rbind, lapply(split(as.data.frame(embeddings), clusters), function(x) apply(x, 2, mean)))
p1 <- p1 + annotate("text", x = centroids[,1], y = centroids[,2], 
                    label = rownames(centroids), size = 4, color = "black")
print(p1)

# Just Regenerating
p2 <- DimPlot(r1_r2_subset, reduction = "umap", group.by = "sample",
              order = r1_r2_smaller) +  # This puts the smaller sample on top
  ggtitle("UMAP: R1/R2 Samples") +
  theme(plot.title = element_text(hjust = 0.5))

# Add cluster labels
embeddings2 <- Embeddings(r1_r2_subset, reduction = "umap")
clusters2 <- r1_r2_subset$seurat_clusters
centroids2 <- do.call(rbind, lapply(split(as.data.frame(embeddings2), clusters2), function(x) apply(x, 2, mean)))
p2 <- p2 + annotate("text", x = centroids2[,1], y = centroids2[,2], 
                    label = rownames(centroids2), size = 4, color = "black")
print(p2)

#UMAP by Regenerating vs Control

# Create a new metadata column for treatment groups
seurat.deconv$treatment_group <- ifelse(seurat.deconv$sample %in% c("C1", "C2"), "Control", "Regenerating")

# Create UMAP plot colored by treatment groups with Control cells in front
DimPlot(seurat.deconv, reduction = "umap", group.by = "treatment_group", 
        cols = c("Control" = "#0173B2", "Regenerating" = "#DE8F05"),
        order = "Control") +  # This puts Control cells on top
  ggtitle("UMAP: Control vs Regenerating Groups") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Group")

# Optional: Add cluster labels to the plot
embeddings <- Embeddings(seurat.deconv, reduction = "umap")
clusters <- seurat.deconv$seurat_clusters
centroids <- do.call(rbind, lapply(split(as.data.frame(embeddings), clusters), function(x) apply(x, 2, mean)))

DimPlot(seurat.deconv, reduction = "umap", group.by = "treatment_group", 
        cols = c("Control" = "#0173B2", "Regenerating" = "#DE8F05"),
        order = "Control") +  # This puts Control cells on top
  ggtitle("UMAP: Control vs Regenerating Groups") +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs(color = "Group") +
  annotate("text", x = centroids[,1], y = centroids[,2], 
           label = rownames(centroids), size = 4, color = "black")

# 8c. Representative cluster distribution plots
# Create table of cluster vs sample
table_data <- table(seurat.deconv@meta.data$seurat_clusters, seurat.deconv@meta.data$sample)

# PLOT 1: Proportion of each SAMPLE found in each cluster (more representative)
# Convert to proportions within each sample (columns sum to 1)
prop_by_sample <- prop.table(table_data, margin = 2) * 100

# Convert to dataframe for ggplot
df_by_sample <- as.data.frame(as.table(prop_by_sample))
colnames(df_by_sample) <- c("Cluster", "Sample", "Percentage")

# Define custom colors: C1=green, C2=blue, R1=red, R2=purple
sample_colors <- c("C1" = "#2E8B57", "C2" = "#4169E1", "R1" = "#DC143C", "R2" = "gold")

# Create representative barplot showing what % of each sample is in each cluster
ggplot(df_by_sample, aes(x = Cluster, y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Sample in Each Cluster", 
       x = "Cluster", 
       y = "% of Sample's Total Cells",
       fill = "Sample",
       subtitle = "Shows what proportion of each sample's cells are found in each cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_sample$Percentage) * 1.1))

# Convert to proportions within each cluster (rows sum to 1)
prop_by_cluster <- prop.table(table_data, margin = 1) * 100

# Convert to dataframe for ggplot
df_stacked <- as.data.frame(as.table(prop_by_cluster))
colnames(df_stacked) <- c("Cluster", "Sample", "Percentage")

# Create stacked barplot
ggplot(df_stacked, aes(x = Cluster, y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Sample Composition by Cluster (Raw Proportions)", 
       x = "Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Sample",
       subtitle = "Shows what % of each cluster is made up of each sample (may be biased by sample size)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_cartesian(ylim = c(0, 100))
```

**Step 4A: Subcluster 1 Visuals and PCA (Clusters 7,10,16,19)**

```{r}
# Extract cells from clusters 7,10,16,19
target_clusters <- c("7","10","16","19")
clusters_subset <- subset(seurat.deconv, subset = seurat_clusters %in% target_clusters)
print(paste("Total cells in clusters 7,10,16,19:", ncol(clusters_subset)))

# Save the original cluster information before it gets overwritten
clusters_subset$original_cluster <- clusters_subset$seurat_clusters

# Re-scale, run PCA, and find new clusters/UMAP
clusters_subset <- ScaleData(clusters_subset)
clusters_subset <- RunPCA(clusters_subset, features = VariableFeatures(seurat.deconv))
clusters_subset <- FindNeighbors(clusters_subset, dims = 1:15)
clusters_subset <- FindClusters(clusters_subset, resolution = 0.8)
clusters_subset <- RunUMAP(clusters_subset, dims = 1:15)
```

**Step 4B: Subcluster NEW CLUSTER Gene Annotation**

```{r}
# ---- Find Marker Genes ----
cluster_markers <- FindAllMarkers(
  object = clusters_subset,
  only.pos = TRUE,
  min.pct = .25,
  logfc.threshold = .25)

top200_per_cluster <- cluster_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 200)

# Create a new workbook with tabs for each cluster
wb <- createWorkbook()
clusters <- unique(top200_per_cluster$cluster)
for(cluster in clusters) {
  cluster_data <- top200_per_cluster %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC1_top200_genes_per_cluster.xlsx", overwrite = TRUE)

# ---- Load Annotations and Merge ----
# Load Seurat top 200 markers per cluster 

# Get all sheet names
sheet_names <- excel_sheets("/home/matthew/data/SC1_top200_genes_per_cluster.xlsx")

# Read all sheets and combine them into one dataframe
cluster_genes <- map_dfr(sheet_names,                    ~read_excel("/home/matthew/data/SC1_top200_genes_per_cluster.xlsx", 
                                   sheet = .x))

# Load the DIAMOND results
annot <- read_tsv("/home/matthew/data/cluster_annotations.tsv", col_names = c(
  "transcript_id", "sseqid", "pident", "evalue", "bitscore", "description"
))

# Clean DIAMOND output
annot_clean <- annot %>%
  mutate(
    gene_id = str_extract(transcript_id, "g\\d+"),
    gene_symbol = str_extract(sseqid, "(?<=\\|)[A-Z0-9]+(?=_HUMAN)"),
    protein_name = str_remove(description, "sp\\|.*?\\|.*?_HUMAN\\s*")
  )

# Keep best hit per gene
annot_best <- annot_clean %>%
  group_by(gene_id) %>%
  slice_max(bitscore, n = 1) %>%
  ungroup()

# FIXED: Check column names and adjust join accordingly
# Debug: Check what columns exist
print("Columns in cluster_genes:")
print(colnames(cluster_genes))
print("Columns in annot_best:")
print(colnames(annot_best))

# Merge with cluster info - FIXED: Use correct column name
final <- cluster_genes %>%
  left_join(annot_best, by = c("gene" = "gene_id"), relationship = "many-to-many")

# Create workbook from the annotated data
wb <- createWorkbook()
clusters <- unique(final$cluster)
for(cluster in clusters) {
  cluster_data <- final %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC1_top200_genes_annotated.xlsx", overwrite = TRUE)
```

**Step 4C - Subcluster 1 UMAP**

```{r}
# 1. UMAP colored by new subclusters
DimPlot(clusters_subset, reduction = "umap", label = TRUE, label.size = 4) +
  ggtitle("SC1 UMAP: Colored by New Subclusters") +
  theme(plot.title = element_text(hjust = 0.5))

# 2. UMAP colored by sample (C1, C2, R1, R2)
DimPlot(clusters_subset, reduction = "umap", group.by = "sample") +
  ggtitle("SC1 UMAP: Colored by Sample") +
  theme(plot.title = element_text(hjust = 0.5))

# 3. UMAP colored by original cluster ()
DimPlot(clusters_subset, reduction = "umap", group.by = "original_cluster") +
  ggtitle("SC1 UMAP: Colored by Original Cluster (7,9,10,16)") +
  theme(plot.title = element_text(hjust = 0.5))
```

**Step 4D - Subcluster 1 Propotional Visuals**

```{r}
# Create data for sample composition bar plot
# Calculate percentage of each sample in each new cluster
sample_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$sample)
sample_totals <- colSums(sample_cluster_counts)

# Convert to percentages (what % of each sample is in each cluster)
df_by_sample <- data.frame()
for(sample in names(sample_totals)) {
  for(cluster in rownames(sample_cluster_counts)) {
    count <- sample_cluster_counts[cluster, sample]
    percentage <- (count / sample_totals[sample]) * 100
    df_by_sample <- rbind(df_by_sample, data.frame(
      Cluster = cluster,
      Sample = sample,
      Count = count,
      Percentage = percentage
    ))
  }
}

# Create data for original cluster composition bar plot
# Calculate percentage of each original cluster in each new cluster
original_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$original_cluster)
original_totals <- colSums(original_cluster_counts)

# Convert to percentages (what % of each original cluster is in each new cluster)
df_by_original <- data.frame()
for(orig_cluster in names(original_totals)) {
  for(new_cluster in rownames(original_cluster_counts)) {
    count <- original_cluster_counts[new_cluster, orig_cluster]
    percentage <- (count / original_totals[orig_cluster]) * 100
    df_by_original <- rbind(df_by_original, data.frame(
      New_Cluster = new_cluster,
      Original_Cluster = paste("Cluster", orig_cluster),
      Count = count,
      Percentage = percentage
    ))
  }
}

# Define colors for samples (adjust as needed)
sample_colors <- c("C1" = "#FF6B6B", "C2" = "#4ECDC4", "R1" = "#45B7D1", "R2" = "#96CEB4")

# Define colors for original clusters
original_colors <- c("Cluster 7" = "#FF9999", "Cluster 10" = "#66B2FF", "Cluster 16" = "#99FF99","Cluster 19" =  "purple")

# 4. Bar plot showing what % of each sample is in each new cluster
ggplot(df_by_sample, aes(x = Cluster, y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Sample in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Sample's Total Cells",
       fill = "Sample   ",
       subtitle = "Shows what proportion of each sample's cells are found in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_sample$Percentage) * 1.1))

# 5. Bar plot showing what % of each original cluster is in each new cluster
ggplot(df_by_original, aes(x = New_Cluster, y = Percentage, fill = Original_Cluster)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = original_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Original Cluster in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Original Cluster's Total Cells",
       fill = "Original Cluster   ",
       subtitle = "Shows what proportion of each original cluster's cells are found in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_original$Percentage) * 1.1))

# Create comprehensive data frame with all combinations
cluster_composition <- data.frame(
  new_cluster = clusters_subset$seurat_clusters,
  original_cluster = clusters_subset$original_cluster,
  sample = clusters_subset$sample
)

# Calculate counts for each combination
composition_counts <- cluster_composition %>%
  group_by(new_cluster, original_cluster, sample) %>%
  summarise(count = n(), .groups = 'drop')

# Define colors
sample_colors <- c("C1" = "firebrick", "C2" = "orange", "R1" = "deepskyblue", "R2" = "purple")
original_colors <- c("7" = "firebrick", "10" = "blue", "16" = "purple", "19" = "gold")

# Option 1: Stacked by sample (shows sample composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_sample <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_sample, aes(x = new_cluster, y = percentage, fill = sample)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Sample Composition Within Each New Cluster", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Sample",
       subtitle = "Shows what samples make up each new cluster (stacked to 100%)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))

# Option 2: Stacked by original cluster (shows original cluster composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_original <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_original, aes(x = new_cluster, y = percentage, fill = original_cluster)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  scale_fill_manual(values = original_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Original Cluster Composition Within Each New Cluster", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Original Cluster",
       subtitle = "Shows what original clusters make up each new cluster (stacked to 100%)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))
```

**Step 5A - Subcluster 2 Visuals and PCA- Clusters 1,2,5,17,30,32**

```{r}
# Extract cells from clusters 1,2,5,17,30,32
target_clusters <- c("1","2","5","17","30","32")
clusters_subset <- subset(seurat.deconv, subset = seurat_clusters %in% target_clusters)
print(paste("Total cells in clusters 1,2,5,17,30,32:", ncol(clusters_subset)))

# Save the original cluster information before it gets overwritten
clusters_subset$original_cluster <- clusters_subset$seurat_clusters

# Re-scale, run PCA, and find new clusters/UMAP
clusters_subset <- ScaleData(clusters_subset)
clusters_subset <- RunPCA(clusters_subset, features = VariableFeatures(seurat.deconv))
clusters_subset <- FindNeighbors(clusters_subset, dims = 1:15)
clusters_subset <- FindClusters(clusters_subset, resolution = 0.8)
clusters_subset <- RunUMAP(clusters_subset, dims = 1:15)
```

**Step 5B - Subcluster 2 Annotation**

```{r}
# ---- Find Marker Genes ----
cluster_markers <- FindAllMarkers(
  object = clusters_subset,
  only.pos = TRUE,
  min.pct = .25,
  logfc.threshold = .25)

top200_per_cluster <- cluster_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 200)

# Create a new workbook with tabs for each cluster
wb <- createWorkbook()
clusters <- unique(top200_per_cluster$cluster)
for(cluster in clusters) {
  cluster_data <- top200_per_cluster %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC2_top200_genes_per_cluster.xlsx", overwrite = TRUE)

# ---- Load Annotations and Merge ----
# Load Seurat top 200 markers per cluster 

# Get all sheet names
sheet_names <- excel_sheets("/home/matthew/data/SC2_top200_genes_per_cluster.xlsx")

# Read all sheets and combine them into one dataframe
cluster_genes <- map_dfr(sheet_names,                    ~read_excel("/home/matthew/data/SC2_top200_genes_per_cluster.xlsx", 
                                   sheet = .x))

# Load the DIAMOND results
annot <- read_tsv("/home/matthew/data/cluster_annotations.tsv", col_names = c(
  "transcript_id", "sseqid", "pident", "evalue", "bitscore", "description"
))

# Clean DIAMOND output
annot_clean <- annot %>%
  mutate(
    gene_id = str_extract(transcript_id, "g\\d+"),
    gene_symbol = str_extract(sseqid, "(?<=\\|)[A-Z0-9]+(?=_HUMAN)"),
    protein_name = str_remove(description, "sp\\|.*?\\|.*?_HUMAN\\s*")
  )

# Keep best hit per gene
annot_best <- annot_clean %>%
  group_by(gene_id) %>%
  slice_max(bitscore, n = 1) %>%
  ungroup()

# FIXED: Check column names and adjust join accordingly
# Debug: Check what columns exist
print("Columns in cluster_genes:")
print(colnames(cluster_genes))
print("Columns in annot_best:")
print(colnames(annot_best))

# Merge with cluster info - FIXED: Use correct column name
final <- cluster_genes %>%
  left_join(annot_best, by = c("gene" = "gene_id"), relationship = "many-to-many")

# Create workbook from the annotated data
wb <- createWorkbook()
clusters <- unique(final$cluster)
for(cluster in clusters) {
  cluster_data <- final %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC2_top200_genes_annotated.xlsx", overwrite = TRUE)
```

**Step 5C - Subcluster 2: 1,2,5,17,30,32 UMAP**

```{r}
# 1. UMAP colored by new subclusters
DimPlot(clusters_subset, reduction = "umap", label = TRUE, label.size = 4) +
  ggtitle("SC2 UMAP: Colored by New Subclusters") +
  theme(plot.title = element_text(hjust = 0.5))

# 2. UMAP colored by sample (C1, C2, R1, R2)
DimPlot(clusters_subset, reduction = "umap", group.by = "sample") +
  ggtitle("SC2 UMAP: Colored by Sample") +
  theme(plot.title = element_text(hjust = 0.5))

# 3. UMAP colored by original cluster (0,5,19,22,23,26,27,32,33)
DimPlot(clusters_subset, reduction = "umap", group.by = "original_cluster") +
  ggtitle("SC2 UMAP: Colored by Original Cluster") +
  theme(plot.title = element_text(hjust = 0.5))
```

**Step 5D - Subcluster 2 Proportional Visuals**

```{r}
# Create data for sample composition bar plot
# Calculate percentage of each sample in each new cluster
sample_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$sample)
sample_totals <- colSums(sample_cluster_counts)

# Convert to percentages (what % of each sample is in each cluster)
df_by_sample <- data.frame()
for(sample in names(sample_totals)) {
  for(cluster in rownames(sample_cluster_counts)) {
    count <- sample_cluster_counts[cluster, sample]
    percentage <- (count / sample_totals[sample]) * 100
    df_by_sample <- rbind(df_by_sample, data.frame(
      Cluster = cluster,
      Sample = sample,
      Count = count,
      Percentage = percentage
    ))
  }
}

# Create data for original cluster composition bar plot
# Calculate percentage of each original cluster in each new cluster
original_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$original_cluster)
original_totals <- colSums(original_cluster_counts)

# Convert to percentages (what % of each original cluster is in each new cluster)
df_by_original <- data.frame()
for(orig_cluster in names(original_totals)) {
  for(new_cluster in rownames(original_cluster_counts)) {
    count <- original_cluster_counts[new_cluster, orig_cluster]
    percentage <- (count / original_totals[orig_cluster]) * 100
    df_by_original <- rbind(df_by_original, data.frame(
      New_Cluster = new_cluster,
      Original_Cluster = paste("Cluster", orig_cluster),
      Count = count,
      Percentage = percentage
    ))
  }
}

# Define colors for samples (adjust as needed)
sample_colors <- c("C1" = "#FF6B6B", "C2" = "gold", "R1" = "#45B7D1", "R2" = "#96CEB4")

# Define colors for original clusters
original_colors <- c("Cluster 0" = "red","Cluster 5" = "blue","Cluster 19" = "green","Cluster 22" = "purple","Cluster 23" = "orange","Cluster 26" = "yellow","Cluster 27" = "brown","Cluster 32" = "pink","Cluster 33" = "darkgray")

# 4. Bar plot showing what % of each sample is in each new cluster
ggplot(df_by_sample, aes(x = reorder(Cluster, as.numeric(Cluster)), y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Sample in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Sample's Total Cells",
       fill = "Sample   ",
       subtitle = "Shows what proportion of each sample's cells are found in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_sample$Percentage) * 1.1))

# 5. Bar plot showing what % of each original cluster is in each new cluster
ggplot(df_by_original, aes(x = reorder(New_Cluster, as.numeric(New_Cluster)), y = Percentage, fill = Original_Cluster)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = original_colors) +
  theme_minimal(base_size = 9) +
  labs(title = "Percent of Each Original Cluster in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Original Cluster Total Cells",
       fill = "Original Cluster   ",
       subtitle = "Proportion of each original cluster's cells in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_original$Percentage) * 1.1))

# Create comprehensive data frame with all combinations
cluster_composition <- data.frame(
  new_cluster = clusters_subset$seurat_clusters,
  original_cluster = clusters_subset$original_cluster,
  sample = clusters_subset$sample
)

# Calculate counts for each combination
composition_counts <- cluster_composition %>%
  group_by(new_cluster, original_cluster, sample) %>%
  summarise(count = n(), .groups = 'drop')

# Option 1: Stacked by sample (shows sample composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_sample <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_sample, aes(x = new_cluster, y = percentage, fill = sample)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Sample Composition Within Each New Cluster", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Sample",
       subtitle = "Shows what samples make up each new cluster (stacked to 100%)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))

# Option 2: Stacked by original cluster (shows original cluster composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_original <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_original, aes(x = new_cluster, y = percentage, fill = original_cluster)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  #scale_fill_manual(values = original_colors) + ##Colors not wokring, letting R choose 
  scale_fill_brewer(palette = "Set1") +
  theme_minimal(base_size = 12) +
  labs(title = "Original Cluster Composition Within New Clusters", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Original Cluster",
       subtitle = "Shows what original clusters make up each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))
```

**Step 6A: Subcluster 3 Visuals and PCA - (3,22,25,26,27,28)**

```{r}
# Extract cells from clusters 3,22,25,26,27,28
target_clusters <- c("3","22","25","26","27","28")
clusters_subset <- subset(seurat.deconv, subset = seurat_clusters %in% target_clusters)
print(paste("Total cells in clusters 3,22,25,26,27,28:", ncol(clusters_subset)))

# Save the original cluster information before it gets overwritten
clusters_subset$original_cluster <- clusters_subset$seurat_clusters

# Re-scale, run PCA, and find new clusters/UMAP
clusters_subset <- ScaleData(clusters_subset)
clusters_subset <- RunPCA(clusters_subset, features = VariableFeatures(seurat.deconv))
clusters_subset <- FindNeighbors(clusters_subset, dims = 1:15)
clusters_subset <- FindClusters(clusters_subset, resolution = 0.8)
clusters_subset <- RunUMAP(clusters_subset, dims = 1:15)
```

**Step 6B: Subcluster 3 Annotations**

```{r}
# ---- Find Marker Genes ----
cluster_markers <- FindAllMarkers(
  object = clusters_subset,
  only.pos = TRUE,
  min.pct = .25,
  logfc.threshold = .25)

top200_per_cluster <- cluster_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 200)

# Create a new workbook with tabs for each cluster
wb <- createWorkbook()
clusters <- unique(top200_per_cluster$cluster)
for(cluster in clusters) {
  cluster_data <- top200_per_cluster %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC3_top200_genes_per_cluster.xlsx", overwrite = TRUE)

# ---- Load Annotations and Merge ----
# Load Seurat top 200 markers per cluster 

# Get all sheet names
sheet_names <- excel_sheets("/home/matthew/data/SC3_top200_genes_per_cluster.xlsx")

# Read all sheets and combine them into one dataframe
cluster_genes <- map_dfr(sheet_names,                    ~read_excel("/home/matthew/data/SC3_top200_genes_per_cluster.xlsx", 
                                   sheet = .x))

# Load the DIAMOND results
annot <- read_tsv("/home/matthew/data/cluster_annotations.tsv", col_names = c(
  "transcript_id", "sseqid", "pident", "evalue", "bitscore", "description"
))

# Clean DIAMOND output
annot_clean <- annot %>%
  mutate(
    gene_id = str_extract(transcript_id, "g\\d+"),
    gene_symbol = str_extract(sseqid, "(?<=\\|)[A-Z0-9]+(?=_HUMAN)"),
    protein_name = str_remove(description, "sp\\|.*?\\|.*?_HUMAN\\s*")
  )

# Keep best hit per gene
annot_best <- annot_clean %>%
  group_by(gene_id) %>%
  slice_max(bitscore, n = 1) %>%
  ungroup()

# FIXED: Check column names and adjust join accordingly
# Debug: Check what columns exist
print("Columns in cluster_genes:")
print(colnames(cluster_genes))
print("Columns in annot_best:")
print(colnames(annot_best))

# Merge with cluster info - FIXED: Use correct column name
final <- cluster_genes %>%
  left_join(annot_best, by = c("gene" = "gene_id"), relationship = "many-to-many")

# Create workbook from the annotated data
wb <- createWorkbook()
clusters <- unique(final$cluster)
for(cluster in clusters) {
  cluster_data <- final %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC3_top200_genes_annotated.xlsx", overwrite = TRUE)
```

**Step 6C - Subcluster 3 UMAP**

```{r}
# 1. UMAP colored by new subclusters
DimPlot(clusters_subset, reduction = "umap", label = TRUE, label.size = 4) +
  ggtitle("SC3 UMAP: Colored by New Subclusters") +
  theme(plot.title = element_text(hjust = 0.5))

# 2. UMAP colored by sample (C1, C2, R1, R2)
DimPlot(clusters_subset, reduction = "umap", group.by = "sample") +
  ggtitle("SC3 UMAP: Colored by Sample") +
  theme(plot.title = element_text(hjust = 0.5))

# 3. UMAP colored by original cluster (7,11,15,25,29)
DimPlot(clusters_subset, reduction = "umap", group.by = "original_cluster") +
  ggtitle("SC3 UMAP: Colored by Original Cluster") +
  theme(plot.title = element_text(hjust = 0.5))
```

**Step 6D - Subcluster 3 Proportional Visuals**

```{r}
# Create data for sample composition bar plot
# Calculate percentage of each sample in each new cluster
sample_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$sample)
sample_totals <- colSums(sample_cluster_counts)

# Convert to percentages (what % of each sample is in each cluster)
df_by_sample <- data.frame()
for(sample in names(sample_totals)) {
  for(cluster in rownames(sample_cluster_counts)) {
    count <- sample_cluster_counts[cluster, sample]
    percentage <- (count / sample_totals[sample]) * 100
    df_by_sample <- rbind(df_by_sample, data.frame(
      Cluster = cluster,
      Sample = sample,
      Count = count,
      Percentage = percentage
    ))
  }
}

# Create data for original cluster composition bar plot
# Calculate percentage of each original cluster in each new cluster
original_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$original_cluster)
original_totals <- colSums(original_cluster_counts)

# Convert to percentages (what % of each original cluster is in each new cluster)
df_by_original <- data.frame()
for(orig_cluster in names(original_totals)) {
  for(new_cluster in rownames(original_cluster_counts)) {
    count <- original_cluster_counts[new_cluster, orig_cluster]
    percentage <- (count / original_totals[orig_cluster]) * 100
    df_by_original <- rbind(df_by_original, data.frame(
      New_Cluster = new_cluster,
      Original_Cluster = paste("Cluster", orig_cluster),
      Count = count,
      Percentage = percentage
    ))
  }
}

# Define colors for samples (adjust as needed)
sample_colors <- c("C1" = "#FF6B6B", "C2" = "gold", "R1" = "#45B7D1", "R2" = "#96CEB4")

# Define colors for original clusters
original_colors <- c("Cluster 3" = "red","Cluster 22" = "blue","Cluster 25" = "green","Cluster 26" = "purple","Cluster 27" = "orange","Cluster 28" = "yellow")


# 4. Bar plot showing what % of each sample is in each new cluster
ggplot(df_by_sample, aes(x = reorder(Cluster, as.numeric(Cluster)), y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Sample in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Sample's Total Cells",
       fill = "Sample   ",
       subtitle = "Shows what proportion of each sample's cells are found in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_sample$Percentage) * 1.1))

# 5. Bar plot showing what % of each original cluster is in each new cluster
ggplot(df_by_original, aes(x = reorder(New_Cluster, as.numeric(New_Cluster)), y = Percentage, fill = Original_Cluster)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  #scale_fill_manual(values = original_colors) +
  theme_minimal(base_size = 9) +
  labs(title = "Percent of Each Original Cluster in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Original Cluster Total Cells",
       fill = "Original Cluster   ",
       subtitle = "Proportion of each original cluster's cells in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_original$Percentage) * 1.1))

# Create comprehensive data frame with all combinations
cluster_composition <- data.frame(
  new_cluster = clusters_subset$seurat_clusters,
  original_cluster = clusters_subset$original_cluster,
  sample = clusters_subset$sample
)

# Calculate counts for each combination
composition_counts <- cluster_composition %>%
  group_by(new_cluster, original_cluster, sample) %>%
  summarise(count = n(), .groups = 'drop')

# Option 1: Stacked by sample (shows sample composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_sample <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_sample, aes(x = new_cluster, y = percentage, fill = sample)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Sample Composition Within Each New Cluster", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Sample",
       subtitle = "Shows what samples make up each new cluster (stacked to 100%)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))

# Option 2: Stacked by original cluster (shows original cluster composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_original <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_original, aes(x = new_cluster, y = percentage, fill = original_cluster)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  #scale_fill_manual(values = original_colors) + ##Colors not working, letting R choose 
  scale_fill_brewer(palette = "Set1") +
  theme_minimal(base_size = 12) +
  labs(title = "Original Cluster Composition Within New Clusters", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Original Cluster",
       subtitle = "Shows what original clusters make up each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))
```

**Step 7A - Subcluster 4 Visuals - (0,4,6,8,9,11,12,13,14,15,18,20,21,23,24,29,31)**

```{r}
# Extract cells from clusters 0,4,6,8,9,11,12,13,14,15,18,20,21,23,24,29,31
target_clusters <- c("0","4","6","8","9","11","12","13","14","15","18","20","21","23","24","29","31")
clusters_subset <- subset(seurat.deconv, subset = seurat_clusters %in% target_clusters)
print(paste("Total cells in clusters 0,4,6,8,9,11,12,13,14,15,18,20,21,23,24,29,31:", ncol(clusters_subset)))

# Save the original cluster information before it gets overwritten
clusters_subset$original_cluster <- clusters_subset$seurat_clusters

# Re-scale, run PCA, and find new clusters/UMAP
clusters_subset <- ScaleData(clusters_subset)
clusters_subset <- RunPCA(clusters_subset, features = VariableFeatures(seurat.deconv))
clusters_subset <- FindNeighbors(clusters_subset, dims = 1:15)
clusters_subset <- FindClusters(clusters_subset, resolution = 0.8)
clusters_subset <- RunUMAP(clusters_subset, dims = 1:15)
```

**Step 7B - Subcluster 4 Annotation**

```{r}
# ---- Find Marker Genes ----
cluster_markers <- FindAllMarkers(
  object = clusters_subset,
  only.pos = TRUE,
  min.pct = .25,
  logfc.threshold = .25)

top200_per_cluster <- cluster_markers %>%
  group_by(cluster) %>%
  slice_max(order_by = avg_log2FC, n = 200)

# Create a new workbook with tabs for each cluster
wb <- createWorkbook()
clusters <- unique(top200_per_cluster$cluster)
for(cluster in clusters) {
  cluster_data <- top200_per_cluster %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC4_top200_genes_per_cluster.xlsx", overwrite = TRUE)

# ---- Load Annotations and Merge ----
# Load Seurat top 200 markers per cluster 

# Get all sheet names
sheet_names <- excel_sheets("/home/matthew/data/SC4_top200_genes_per_cluster.xlsx")

# Read all sheets and combine them into one dataframe
cluster_genes <- map_dfr(sheet_names,                    ~read_excel("/home/matthew/data/SC4_top200_genes_per_cluster.xlsx", 
                                   sheet = .x))

# Load the DIAMOND results
annot <- read_tsv("/home/matthew/data/cluster_annotations.tsv", col_names = c(
  "transcript_id", "sseqid", "pident", "evalue", "bitscore", "description"
))

# Clean DIAMOND output
annot_clean <- annot %>%
  mutate(
    gene_id = str_extract(transcript_id, "g\\d+"),
    gene_symbol = str_extract(sseqid, "(?<=\\|)[A-Z0-9]+(?=_HUMAN)"),
    protein_name = str_remove(description, "sp\\|.*?\\|.*?_HUMAN\\s*")
  )

# Keep best hit per gene
annot_best <- annot_clean %>%
  group_by(gene_id) %>%
  slice_max(bitscore, n = 1) %>%
  ungroup()

# FIXED: Check column names and adjust join accordingly
# Debug: Check what columns exist
print("Columns in cluster_genes:")
print(colnames(cluster_genes))
print("Columns in annot_best:")
print(colnames(annot_best))

# Merge with cluster info - FIXED: Use correct column name
final <- cluster_genes %>%
  left_join(annot_best, by = c("gene" = "gene_id"), relationship = "many-to-many")

# Create workbook from the annotated data
wb <- createWorkbook()
clusters <- unique(final$cluster)
for(cluster in clusters) {
  cluster_data <- final %>% filter(cluster == !!cluster)
  addWorksheet(wb, sheetName = paste0("Cluster_", cluster))
  writeData(wb, sheet = paste0("Cluster_", cluster), x = cluster_data)
}
saveWorkbook(wb, "/home/matthew/data/SC4_top200_genes_annotated.xlsx", overwrite = TRUE)
```


**Step 7B - Subcluster 4 UMAP**

```{r}
# 1. UMAP colored by new subclusters
DimPlot(clusters_subset, reduction = "umap", label = TRUE, label.size = 4) +
  ggtitle("SC4 UMAP: Colored by New Subclusters") +
  theme(plot.title = element_text(hjust = 0.5))

# 2. UMAP colored by sample (C1, C2, R1, R2)
DimPlot(clusters_subset, reduction = "umap", group.by = "sample") +
  ggtitle("SC4 UMAP: Colored by Sample") +
  theme(plot.title = element_text(hjust = 0.5))

# 3. UMAP colored by original cluster (7,11,15,25,29)
DimPlot(clusters_subset, reduction = "umap", group.by = "original_cluster") +
  ggtitle("SC4 UMAP: Colored by Original Cluster") +
  theme(plot.title = element_text(hjust = 0.5))
```

**Step 7C - Subcluster 4 Proportional Visuals**

```{r}
# Create data for sample composition bar plot
# Calculate percentage of each sample in each new cluster
sample_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$sample)
sample_totals <- colSums(sample_cluster_counts)

# Convert to percentages (what % of each sample is in each cluster)
df_by_sample <- data.frame()
for(sample in names(sample_totals)) {
  for(cluster in rownames(sample_cluster_counts)) {
    count <- sample_cluster_counts[cluster, sample]
    percentage <- (count / sample_totals[sample]) * 100
    df_by_sample <- rbind(df_by_sample, data.frame(
      Cluster = cluster,
      Sample = sample,
      Count = count,
      Percentage = percentage
    ))
  }
}

# Create data for original cluster composition bar plot
# Calculate percentage of each original cluster in each new cluster
original_cluster_counts <- table(clusters_subset$seurat_clusters, clusters_subset$original_cluster)
original_totals <- colSums(original_cluster_counts)

# Convert to percentages (what % of each original cluster is in each new cluster)
df_by_original <- data.frame()
for(orig_cluster in names(original_totals)) {
  for(new_cluster in rownames(original_cluster_counts)) {
    count <- original_cluster_counts[new_cluster, orig_cluster]
    percentage <- (count / original_totals[orig_cluster]) * 100
    df_by_original <- rbind(df_by_original, data.frame(
      New_Cluster = new_cluster,
      Original_Cluster = paste("Cluster", orig_cluster),
      Count = count,
      Percentage = percentage
    ))
  }
}

# Define colors for samples (adjust as needed)
sample_colors <- c("C1" = "#FF6B6B", "C2" = "gold", "R1" = "#45B7D1", "R2" = "#96CEB4")

# Define colors for original clusters
original_colors <- c(
  "Cluster 0" = "#FF0000",    # Red
  "Cluster 4" = "#0000FF",    # Blue  
  "Cluster 6" = "#00FF00",    # Green
  "Cluster 8" = "#FF00FF",    # Magenta
  "Cluster 9" = "#FFA200",    # Orange
  "Cluster 11" = "#FFFF00",   # Yellow
  "Cluster 12" = "#800080",   # Purple
  "Cluster 13" = "#00FFFF",   # Cyan
  "Cluster 14" = "#FF69B4",   # Hot Pink
  "Cluster 15" = "#8B4513",   # Saddle Brown
  "Cluster 18" = "#00CED1",   # Dark Turquoise
  "Cluster 20" = "#FF1493",   # Deep Pink
  "Cluster 21" = "#32CD32",   # Lime Green
  "Cluster 23" = "#FF4500",   # Orange Red
  "Cluster 24" = "#9400D3",   # Violet
  "Cluster 29" = "#2E8B57",   # Sea Green
  "Cluster 31" = "#DC143C"    # Crimson
)


# 4. Bar plot showing what % of each sample is in each new cluster
ggplot(df_by_sample, aes(x = reorder(Cluster, as.numeric(Cluster)), y = Percentage, fill = Sample)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Percent of Each Sample in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Sample's Total Cells",
       fill = "Sample   ",
       subtitle = "Shows what proportion of each sample's cells are found in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_sample$Percentage) * 1.1))

# 5. Bar plot showing what % of each original cluster is in each new cluster
ggplot(df_by_original, aes(x = reorder(New_Cluster, as.numeric(New_Cluster)), y = Percentage, fill = Original_Cluster)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.8) +
  #scale_fill_manual(values = original_colors) +
  theme_minimal(base_size = 9) +
  labs(title = "Percent of Each Original Cluster in Each New Cluster", 
       x = "New Cluster", 
       y = "% of Original Cluster Total Cells",
       fill = "Original Cluster   ",
       subtitle = "Proportion of each original cluster's cells in each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, max(df_by_original$Percentage) * 1.1))

# Create comprehensive data frame with all combinations
cluster_composition <- data.frame(
  new_cluster = clusters_subset$seurat_clusters,
  original_cluster = clusters_subset$original_cluster,
  sample = clusters_subset$sample
)

# Calculate counts for each combination
composition_counts <- cluster_composition %>%
  group_by(new_cluster, original_cluster, sample) %>%
  summarise(count = n(), .groups = 'drop')

# Option 1: Stacked by sample (shows sample composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_sample <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_sample, aes(x = new_cluster, y = percentage, fill = sample)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  scale_fill_manual(values = sample_colors) +
  theme_minimal(base_size = 12) +
  labs(title = "Sample Composition Within Each New Cluster", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Sample",
       subtitle = "Shows what samples make up each new cluster (stacked to 100%)") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))

# Option 2: Stacked by original cluster (shows original cluster composition within each new cluster)
# Calculate percentages within each new cluster
composition_by_original <- composition_counts %>%
  group_by(new_cluster) %>%
  mutate(total_in_cluster = sum(count),
         percentage = (count / total_in_cluster) * 100)

ggplot(composition_by_original, aes(x = new_cluster, y = percentage, fill = original_cluster)) +
  geom_bar(stat = "identity", position = "stack", width = 0.8) +
  #scale_fill_manual(values = original_colors) + ##Colors not working, letting R choose 
  scale_fill_brewer(palette = "Set1") +
  theme_minimal(base_size = 12) +
  labs(title = "Original Cluster Composition Within New Clusters", 
       x = "New Cluster", 
       y = "Percentage of Cells in Cluster",
       fill = "Original Cluster",
       subtitle = "Shows what original clusters make up each new cluster") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5, size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90", size = 0.5),
        panel.grid.minor = element_blank(),
        legend.position = "bottom") +
  coord_cartesian(ylim = c(0, 100))
```
